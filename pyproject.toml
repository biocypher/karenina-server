[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "karenina-server"
version = "0.1.0"
description = "FastAPI server for the Karenina benchmarking system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["fastapi", "llm", "benchmarking", "web-api", "server"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: FastAPI",
]
dependencies = [
    "karenina>=0.1.0", # Core library dependency
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6", # For file uploads
    "websockets>=12.0", # For WebSocket support
    "jinja2>=3.1.0", # For HTML templates
    "aiofiles>=23.0.0", # For async file operations
    "python-dotenv>=1.1.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-testmon>=2.1.3",    # For smart testing
    "httpx>=0.24.0",            # For testing FastAPI
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "vulture>=2.0.0",           # For dead code detection
    "pre-commit>=3.0.0",
]

[project.scripts]
karenina-server = "karenina_server.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/karenina-server"
Documentation = "https://karenina.readthedocs.io"
"Source Code" = "https://github.com/yourusername/karenina-server"
"Issue Tracker" = "https://github.com/yourusername/karenina-server/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/karenina_server"]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src/karenina_server"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.isort]
known-first-party = ["karenina_server"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001"]  # Unused function argument

[tool.vulture]
# Configure vulture for dead code detection
paths = ["src", "tests"]
min_confidence = 80
ignore_decorators = ["@pytest.fixture", "@property", "@abstractmethod"]
ignore_names = ["test_*", "setUp", "tearDown"]
make_whitelist = true

[tool.uv.sources]
karenina = { path = "../karenina", editable = true }

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "deptree>=0.0.12",
    "pre-commit>=4.2.0",
    "pytest-testmon>=2.1.3",
    "python-semantic-release>=10.1.0",
    "twine>=6.1.0",
    "vulture>=2.14",
]

[tool.semantic_release]
version_variables = [
    "src/karenina_server/__init__.py:__version__",
]
build_command = "uv run python -m build"
dist_path = "dist/"
upload_to_pypi = true
upload_to_release = true
commit_message = "chore(release): {version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
